#include<stdlib.h>
#include<stdio.h>
#include<gl/freeglut.h>
#include<time.h>
#include<string.h>
float bspd = 0.005;// send of the block
char name[25];
float b1x = 50.0, b1y = 0; //block 1 init position
float hm = 0.0; //copter moving dy value
int i = 0, sci = 1; // for increment score score_int score_flag
float scf = 1;
char scs[20], slevel[20]; //to store score_string using itoa() and level as well
int level = 1, lflag = 1, wflag = 1, eflag = 0; //level_flag & welcome_flag init w/ 1
void starting() {
srand(time(0));
b1y = (rand() % 45) + 10;
glClearColor(0.0, 0.0, 0.0, 0.0);
glShadeModel(GL_SMOOTH);
glLoadIdentity();
glOrtho(0.0, 100.0, 0.0, 100.0, -1.0, 0.0);
}
//draw_copter is the function used to draw copter
void draw_copter() {
glColor3f(0.7, 1.0, 1.0);
glRectf(10, 49.8, 19.8, 44.8);
glRectf(2, 46, 10, 48);//tail
glRectf(2, 46, 4, 51);//tail up
glRectf(14, 49.8, 15.8, 52.2);//propeller stand
glRectf(7, 53.6, 22.8, 52.2);//propeller*/
}
//used to display string on screen
void render(float x, float y, float z, void *font, char *string) {
char *c;
glRasterPos3f(x, y, z);
for (c = string;*c != '\0';c++) {
glutBitmapCharacter(font, *c);
}
}
void display(void) {
glFlush();
//GameOver Checking
if(
(i==5200||i==-5000)
//top and bottom checking
||
( ((int)b1x==10||(int)b1x==7||(int)b1x==4||(int)b1x==1)
&&(int)b1y<53+(int)hm&&(int)b1y+35>53+(int)hm)
// propeller front checking
||
( ((int)b1x==9||(int)b1x==3||(int)b1x==6) &&(int)b1y<45+(int)hm&&(int)b1y+35>45+(int)hm)
//lower body checking
||
( ((int)b1x==0) && (int)b1y<46+(int)hm&&(int)b1y+35>46+(int)hm))
{
glClear(GL_COLOR_BUFFER_BIT);
char g[] = "GAME OVER!!!";
char y[] = "You";
char s[] = "scored:";
glColor3f(0.0, 0.0, 1.0);
glRectf(0.0, 0.0, 100.0, 100.0);
glColor3f(1.0, 0.0, 0.0);
render(40, 70, 0, GLUT_BITMAP_TIMES_ROMAN_24, g);
glColor3f(1.0, 1.0, 1.0);
render(25, 58, 0, GLUT_BITMAP_TIMES_ROMAN_24, y);
render(45, 58, 0, GLUT_BITMAP_TIMES_ROMAN_24, s);
render(70, 58, 0, GLUT_BITMAP_TIMES_ROMAN_24, scs);
glutSwapBuffers();
glFlush();
printf("\nGAME OVER\n\n");
printf("%s\tYou scored %s", name, scs);
eflag = 1;
printf("\n\nClose the console window to exit...\n");
glFlush();
}
else if (wflag == 1)//front screen display
{
glClear(GL_COLOR_BUFFER_BIT);
char p[] = "A Mini Project For Computer Graphics & Visualization Laboratery";
char h[] = "Helicopter";
char w[] = "Welcome";
char st[] = "Click To Start";
char cli[] = "CLICK AND HOLD LEFT MOUSE BUTTON TO GO UP
RELEASE TO GO DOWN";
char vkit[] = "Vivekananda Institute Of Technology";
char nameRN[] = " Rajath Nithin";
char usn[] = "1VK16CS055 1VK16CS044";
char cse[] = "Department Of CSE";
char gu[] = "Guided By: ";
char sir[] = "S Suresh Kumar";
char phd[] = "B.E,M.Tech,(Ph.D)";
char asst[] = "Asst. Prof of VKIT";
wflag = 0;
glColor3f(0.0, 0.5, 0.7);
glRectf(0.0, 0.0, 100.0, 10.0);//ceil
glRectf(0.0, 100.0, 100.0, 90.0);//floor
glColor3f(1.0, 1.0, 1.0);
render(35, 85, 0, GLUT_BITMAP_HELVETICA_18, vkit);
render(41, 80, 0, GLUT_BITMAP_HELVETICA_18, cse);
glColor3f(1.0, 1.0, 0.0);
render(20, 75, 0, GLUT_BITMAP_HELVETICA_18, p);
render(44, 70, 0, GLUT_BITMAP_TIMES_ROMAN_24, h);
render(35, 65, 0, GLUT_BITMAP_HELVETICA_18, nameRN);
render(35, 60, 0, GLUT_BITMAP_HELVETICA_18, usn);
render(47, 55, 0, GLUT_BITMAP_HELVETICA_18, gu);
render(40, 50, 0, GLUT_BITMAP_HELVETICA_18, sir);
render(57, 50, 0, GLUT_BITMAP_HELVETICA_10, phd);
render(40, 47, 0, GLUT_BITMAP_9_BY_15, asst);
glColor3f(1.0, 0.0, 0.0);
render(40, 35, 0, GLUT_BITMAP_TIMES_ROMAN_24, w);
render(53, 35, 0, GLUT_BITMAP_TIMES_ROMAN_24, name);
render(40, 30, 0, GLUT_BITMAP_TIMES_ROMAN_24, st);
render(17, 24, 0, GLUT_BITMAP_9_BY_15, cli);
glColor3f(0.0, 0.0, 0.0);
draw_copter();
glutSwapBuffers();
glFlush();
}
else if (!eflag)//level complete//level up
{
glClear(GL_COLOR_BUFFER_BIT);
char str[10];
if (sci % 200 == 0 && lflag == 1) {
lflag = 0;
level++;
glFlush();
bspd += 0.001;
}
else if (sci % 200 != 0 && lflag != 1) {
lflag = 1;
}
else if (level % 1 == 0 && lflag == 0) {
glFlush();
glColor3f(1.0, 1.0, 0.0);
char lecom[] = "LEVEL";
char lecom1[] = "Completed";
sprintf(slevel, "%d", level);
render(40, 45, 0, GLUT_BITMAP_TIMES_ROMAN_24, lecom);
render(60, 45, 0, GLUT_BITMAP_TIMES_ROMAN_24, slevel);
render(80, 45, 0, GLUT_BITMAP_TIMES_ROMAN_24, lecom1);
Sleep(20);
glutPostRedisplay();
}
char d[] = "Distance:";
char l[] = "Level:";
glPushMatrix();
glColor3f(0.0, 0.5, 0.7);
glRectf(0.0, 0.0, 100.0, 10.0); //ceil
glRectf(0.0, 100.0, 100.0, 90.0); //floor
glColor3f(0.0, 0.0, 0.0); //score
render(1, 3, 0, GLUT_BITMAP_TIMES_ROMAN_24, d);
sprintf(slevel, "%d", level); //level
render(80, 3, 0, GLUT_BITMAP_TIMES_ROMAN_24, l);
render(93, 3, 0, GLUT_BITMAP_TIMES_ROMAN_24, slevel);
scf += 0.005;
sci = (int)scf;
sprintf(scs, "%d", sci);
render(20, 3, 0, GLUT_BITMAP_TIMES_ROMAN_24, scs);
glTranslatef(0.0, hm, 0.0);
draw_copter();
if (b1x < -10)
{
b1x = 50; //total width is 50
b1y = (rand() % 25) + 20;
}
else
b1x -= bspd;
//within the projection volume dec its x value by block_speed
glTranslatef(b1x, -hm, 0.0);
glColor3f(1.0, 0.0, 0.0);
glRectf(b1x, b1y, b1x + 5, b1y + 35);//block 1
glPopMatrix();
glutSwapBuffers();
glFlush();
}
}
//moving helicopter up
void moveheliU(void) {
hm += 0.007;
i++;
glutPostRedisplay();
}
//moving helicopter down
void moveheliD(void) {
hm -= 0.007;
i--;
glutPostRedisplay();
}
//mouse function
void mouse(int btn, int state, int x, int y) {
if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
glutIdleFunc(moveheliU);
if (btn == GLUT_LEFT_BUTTON && state == GLUT_UP)
glutIdleFunc(moveheliD);
}
//key function
void keys(unsigned char key, int x, int y)
{
if (key == 'w') glutIdleFunc(moveheliU);
if (key == 's') glutIdleFunc(moveheliD);
}
int main(int argc, char **argv) {
printf("enter your name to play: ");
scanf("%s", name);
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
glutInitWindowSize(800, 600);
glutInitWindowPosition(200, 200);
glutCreateWindow("2D Copter Game");
starting();
glutDisplayFunc(display);
glutMouseFunc(mouse);
glutKeyboardFunc(keys);
glutMainLoop();
return 0;
}